#!/usr/bin/env python3

import os
import re
from concurrent.futures import ThreadPoolExecutor
from tqdm import tqdm
from .utils import run_command

class VulnerabilityScanner:
    def __init__(self, host_data, output_dir, threads=10, logger=None):
        """Initialize the vulnerability scanner module."""
        self.host_data = host_data
        self.output_dir = output_dir
        self.threads = threads
        self.logger = logger
        self.vulnerable_hosts = []
    
    def scan_host_vulnerabilities(self, host):
        """Scan a single host for vulnerabilities."""
        host_info = self.host_data[host]
        host_dir = os.path.join(self.output_dir, "hosts", host)
        vuln_file = os.path.join(host_dir, "vulnerabilities.txt")
        
        with open(vuln_file, 'w') as f:
            f.write(f"Vulnerability scan for {host}\n")
            f.write("=" * 50 + "\n\n")
            
            # Run vulnerability scan with nmap scripts
            if host_info["ports"]:
                ports_str = ",".join(map(str, host_info["ports"]))
                vuln_scan_cmd = [
                    "nmap", "--script", "vuln", 
                    "-p", ports_str,
                    host
                ]
                
                vuln_output = run_command(vuln_scan_cmd, self.logger)
                f.write("NMAP VULNERABILITY SCAN:\n")
                f.write(vuln_output)
                f.write("\n\n")
                
                # Extract vulnerabilities
                vuln_pattern = r'(?:VULNERABLE|VULNERABILITY):\s*([^\n]+)'
                vulnerabilities = re.findall(vuln_pattern, vuln_output)
                
                if vulnerabilities:
                    self.host_data[host]["vulnerabilities"].extend(vulnerabilities)
                    if host not in self.vulnerable_hosts:
                        self.vulnerable_hosts.append(host)
            
            # Check for common services and run specific checks
            for port in host_info["ports"]:
                # SMB/Windows checks
                if port in [139, 445]:
                    f.write("SMB VULNERABILITY CHECK:\n")
                    smb_check_cmd = [
                        "nmap", "--script", "smb-vuln*", 
                        "-p", str(port),
                        host
                    ]
                    smb_output = run_command(smb_check_cmd, self.logger)
                    f.write(smb_output)
                    f.write("\n\n")
                    
                    # Extract SMB vulnerabilities
                    smb_vuln_pattern = r'smb-vuln[^:]*:\s*([^\n]+)'
                    smb_vulns = re.findall(smb_vuln_pattern, smb_output)
                    if smb_vulns:
                        self.host_data[host]["vulnerabilities"].extend(smb_vulns)
                        if host not in self.vulnerable_hosts:
                            self.vulnerable_hosts.append(host)
                
                # Web server checks
                elif port in [80, 443, 8080, 8443]:
                    f.write(f"WEB SERVER CHECK (PORT {port}):\n")
                    web_check_cmd = [
                        "nmap", "--script", "http-enum,http-vuln*", 
                        "-p", str(port),
                        host
                    ]
                    web_output = run_command(web_check_cmd, self.logger)
                    f.write(web_output)
                    f.write("\n\n")
                    
                    # Extract web vulnerabilities
                    web_vuln_pattern = r'http-vuln[^:]*:\s*([^\n]+)'
                    web_vulns = re.findall(web_vuln_pattern, web_output)
                    if web_vulns:
                        self.host_data[host]["vulnerabilities"].extend(web_vulns)
                        if host not in self.vulnerable_hosts:
                            self.vulnerable_hosts.append(host)
                
                # Database checks
                elif port in [1433, 3306, 5432]:
                    f.write(f"DATABASE CHECK (PORT {port}):\n")
                    db_check_cmd = [
                        "nmap", "--script", "ms-sql-info,mysql-info,pgsql-info", 
                        "-p", str(port),
                        host
                    ]
                    db_output = run_command(db_check_cmd, self.logger)
                    f.write(db_output)
                    f.write("\n\n")
        
        return host, self.host_data[host]["vulnerabilities"]
    
    def scan_vulnerabilities(self):
        """Scan all hosts for vulnerabilities."""
        self.logger.info("Scanning hosts for vulnerabilities...")
        
        results = []
        with ThreadPoolExecutor(max_workers=self.threads) as executor:
            futures = {executor.submit(self.scan_host_vulnerabilities, host): host 
                      for host in self.host_data}
            
            for future in tqdm(futures, desc="Scanning vulnerabilities", unit="host"):
                try:
                    results.append(future.result())
                except Exception as e:
                    self.logger.error(f"Error scanning vulnerabilities: {e}")
        
        return results
    
    def get_host_data(self):
        """Return the updated host data dictionary."""
        return self.host_data
    
    def get_vulnerable_hosts(self):
        """Return the list of vulnerable hosts."""
        return self.vulnerable_hosts 